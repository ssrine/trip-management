from rest_framework import viewsets
from .models import Trip, LogSheet, Entry
from .serializers import TripSerializer, LogSheetSerializer, EntrySerializer
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from rest_framework.decorators import action
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
import io
from datetime import datetime

# -----------------------------
# Trip ViewSet
# -----------------------------
class TripViewSet(viewsets.ModelViewSet):
    queryset = Trip.objects.all()
    serializer_class = TripSerializer

    @action(detail=True, methods=['get'])
    def pdf(self, request, pk=None):
        print("DEBUG: TripViewSet.pdf() called with pk:", pk)
        trip = self.get_object()
        print("DEBUG: Trip object fetched:", trip)

        buffer = io.BytesIO()
        p = canvas.Canvas(buffer)
        # Basic info
        p.drawString(100, 750, f"Trip ID: {trip.id}")
        p.drawString(100, 730, f"Current Location: {trip.current_location}")
        p.drawString(100, 710, f"Pickup: {trip.pickup_location}")
        p.drawString(100, 690, f"Dropoff: {trip.dropoff_location}")
        p.showPage()
        p.save()
        buffer.seek(0)
        return HttpResponse(buffer, content_type='application/pdf')


# -----------------------------
# LogSheet ViewSet
# -----------------------------
class LogSheetViewSet(viewsets.ModelViewSet):
    queryset = LogSheet.objects.all()
    serializer_class = LogSheetSerializer


# -----------------------------
# Entry ViewSet
# -----------------------------
class EntryViewSet(viewsets.ModelViewSet):
    queryset = Entry.objects.all()
    serializer_class = EntrySerializer


# -----------------------------
# Detailed PDF with debugging
# -----------------------------

def trip_pdf(request, trip_id):
    try:
        trip = Trip.objects.get(id=trip_id)
    except Trip.DoesNotExist:
        return HttpResponse("Trip not found", status=404)

    buffer = io.BytesIO()
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="trip_{trip.id}.pdf"'

    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    margin = 50
    y = height - margin

    # Title
    c.setFont("Helvetica-Bold", 20)
    c.setFillColor(colors.darkblue)
    c.drawString(margin, y, f"Trip #{trip.id}")
    y -= 30

    # Separator line
    c.setStrokeColor(colors.darkblue)
    c.setLineWidth(1)
    c.line(margin, y, width - margin, y)
    y -= 20

    # Trip Info
    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.black)
    c.drawString(margin, y, "Current Location:")
    c.setFont("Helvetica", 12)
    c.setFillColor(colors.darkgreen)
    c.drawString(margin + 130, y, trip.current_location)
    y -= 20

    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.black)
    c.drawString(margin, y, "Pickup Location:")
    c.setFont("Helvetica", 12)
    c.setFillColor(colors.darkgreen)
    c.drawString(margin + 130, y, trip.pickup_location)
    y -= 20

    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.black)
    c.drawString(margin, y, "Dropoff Location:")
    c.setFont("Helvetica", 12)
    c.setFillColor(colors.darkgreen)
    c.drawString(margin + 130, y, trip.dropoff_location)
    y -= 30

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColor(colors.grey)
    c.drawString(margin, 30, "Generated by Truck App")

    c.showPage()
    c.save()

    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    return response